## No Static Group Authorization Rules **


## [Start] Dynamic Group Authorization Checks **
#set( $userGroups = $ctx.identity.claims.get("cognito:groups") )
## Authorization rule: { allow: "groups", groupsField: "management" } **
#set( $isDynamicGroupAuthorized = $util.defaultIfNull($isDynamicGroupAuthorized, false) )
#foreach( $userGroup in $userGroups )
  #if( $$util.isList($ctx.args.input.management) )
    #if( $ctx.args.input.management.contains($userGroup) )
      #set( $isDynamicGroupAuthorized = true )
    #end
  #end
  #if( $util.isString($ctx.args.input.management) )
    #if( $ctx.args.input.management == $userGroup )
      #set( $isDynamicGroupAuthorized = true )
    #end
  #end
#end
## [End] Dynamic Group Authorization Checks **


## No Owner Authorization Rules **


## [Start] Throw if unauthorized **
#if( !($isStaticGroupAuthorized == true || $isDynamicGroupAuthorized == true || $isOwnerAuthorized == true) )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **

## [Start] Prepare DynamoDB PutItem Request. **
$util.qr($context.args.input.put("createdAt", $util.time.nowISO8601()))
$util.qr($context.args.input.put("updatedAt", $util.time.nowISO8601()))
$util.qr($context.args.input.put("__typename", "BlockchainBlock"))
{
  "version": "2017-02-28",
  "operation": "PutItem",
  "key": {
      "id":     $util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.args.input.id, $util.autoId()))
  },
  "attributeValues": $util.dynamodb.toMapValuesJson($context.args.input),
  "condition": {
      "expression": "attribute_not_exists(#id)",
      "expressionNames": {
          "#id": "id"
    }
  }
}
## [End] Prepare DynamoDB PutItem Request. **